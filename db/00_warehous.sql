-- =====================================================================
-- Real-Time Flights Data Warehouse bootstrap
-- Purpose:
--   * Create a minimal star schema fed by a flat staging table.
--   * Support idempotent initialisation (DROP IF EXISTS) so you can
--     re-run this file without manual cleanup.
-- What it does:
--   1) STAGING table (raw, append-only) populated by Spark streaming.
--   2) DIMENSIONS (airline, airport, route).
--   3) FACT table (latest record per flight_key), updated by the loader.
-- Notes:
--   * Delay columns are FLOAT with >=0 checks to protect data quality.
--   * Helpful indexes are created for ingestion and analytics.
-- =====================================================================

-- ======================
-- 1) STAGING (flat)
--    - Landing zone for Spark stream (append).
--    - No FKs; keep writes fast & schema simple.
--    - Loader reads from here, builds dims/fact, then purges processed rows.
-- ======================
DROP TABLE IF EXISTS fact_flight_status_staging;
CREATE TABLE fact_flight_status_staging (
    flight_key           TEXT NOT NULL,                 -- Natural-ish key composed in producer (e.g., <flightNum>_<dep_sched>)
    flight_date          DATE,                          -- Date portion only (helps partitioning/rollups later)
    status               TEXT,                          -- Raw status text from API (active/landed/en-route/etc.)
    ingest_time          TIMESTAMPTZ NOT NULL DEFAULT NOW(),  -- When this row hit staging

    -- Flight identifiers echoed from the source
    flight_number        TEXT,
    flight_iata          TEXT,
    flight_icao          TEXT,

    -- Airline attributes (dim candidate)
    airline_iata         TEXT,
    airline_icao         TEXT,
    airline_name         TEXT,

    -- Departure attributes (dim candidate)
    dep_airport          TEXT,                          -- Human-friendly airport name
    dep_airport_iata     TEXT,                          -- IATA code (preferred join)
    dep_airport_icao     TEXT,                          -- ICAO code (fallback join)
    dep_terminal         TEXT,
    dep_gate             TEXT,
    dep_scheduled        TIMESTAMPTZ,                   -- Parsed, normalized in Spark
    dep_estimated        TIMESTAMPTZ,
    dep_actual           TIMESTAMPTZ,
    dep_delay_min        FLOAT CHECK (dep_delay_min IS NULL OR dep_delay_min >= 0),

    -- Arrival attributes (dim candidate)
    arr_airport          TEXT,
    arr_airport_iata     TEXT,
    arr_airport_icao     TEXT,
    arr_terminal         TEXT,
    arr_gate             TEXT,
    arr_scheduled        TIMESTAMPTZ,
    arr_estimated        TIMESTAMPTZ,
    arr_actual           TIMESTAMPTZ,
    arr_delay_min        FLOAT CHECK (arr_delay_min IS NULL OR arr_delay_min >= 0)
);

-- Write-path indexes (speed up loader scans/lookups)
CREATE INDEX IF NOT EXISTS idx_stg_flight_key   ON fact_flight_status_staging (flight_key);
CREATE INDEX IF NOT EXISTS idx_stg_dep_sched    ON fact_flight_status_staging (dep_scheduled);
CREATE INDEX IF NOT EXISTS idx_stg_arr_sched    ON fact_flight_status_staging (arr_scheduled);
CREATE INDEX IF NOT EXISTS idx_stg_airline_iata ON fact_flight_status_staging (airline_iata);
CREATE INDEX IF NOT EXISTS idx_stg_ingest_time  ON fact_flight_status_staging (ingest_time);

-- ======================
-- 2) DIMENSIONS
--    - Small, slowly changing entities keyed by surrogate IDs.
--    - IATA is UNIQUE for airline/airport (preferred), ICAO UNIQUE for airport as well.
--    - Loader handles upserts carefully (IATA-first, ICAO fallback).
-- ======================

-- ---- Airline dimension ----
DROP TABLE IF EXISTS dim_airline CASCADE;
CREATE TABLE dim_airline (
    airline_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Surrogate key
    iata            TEXT UNIQUE,        -- Natural key (preferred)
    icao            TEXT,               -- Fallback/secondary key (non-unique here; can vary)
    airline_name    TEXT                -- Descriptive attribute
);

-- ---- Airport dimension ----
DROP TABLE IF EXISTS dim_airport CASCADE;
CREATE TABLE dim_airport (
    airport_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Surrogate key
    iata            TEXT UNIQUE,        -- Preferred join key
    icao            TEXT UNIQUE,        -- Fallback join key
    airport_name    TEXT                -- Descriptive attribute
);

-- ---- Route dimension ----
-- A route is (departure airport, arrival airport) pair, deduped via unique constraint.
DROP TABLE IF EXISTS dim_route CASCADE;
CREATE TABLE dim_route (
    route_id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Surrogate key
    dep_airport_id  INTEGER NOT NULL REFERENCES dim_airport(airport_id),   -- FK to airport dim
    arr_airport_id  INTEGER NOT NULL REFERENCES dim_airport(airport_id),   -- FK to airport dim
    CONSTRAINT uq_route UNIQUE (dep_airport_id, arr_airport_id)            -- Prevent duplicates
);

-- ======================
-- 3) FACT
--    - Grain: one row per flight_key (the “latest” status kept by loader).
--    - References airline and route dimensions.
--    - Timestamps normalized in Spark; numeric delays validated.
--    - last_updated helps downstream syncs (e.g., Google Sheets sink).
-- ======================
DROP TABLE IF EXISTS fact_flight_status;
CREATE TABLE fact_flight_status (
    flight_key       TEXT PRIMARY KEY,                              -- Natural key from producer/Spark
    flight_date      DATE,                                          -- For day-level grouping
    status           TEXT,                                          -- Latest known status
    ingest_time      TIMESTAMPTZ NOT NULL DEFAULT NOW(),            -- Last ingestion into fact

    airline_id       INTEGER REFERENCES dim_airline(airline_id),    -- FK to airline
    route_id         INTEGER REFERENCES dim_route(route_id),        -- FK to route

    -- Departure timeline
    dep_scheduled    TIMESTAMPTZ,
    dep_estimated    TIMESTAMPTZ,
    dep_actual       TIMESTAMPTZ,
    dep_delay_min    FLOAT CHECK (dep_delay_min IS NULL OR dep_delay_min >= 0),

    -- Arrival timeline
    arr_scheduled    TIMESTAMPTZ,
    arr_estimated    TIMESTAMPTZ,
    arr_actual       TIMESTAMPTZ,
    arr_delay_min    FLOAT CHECK (arr_delay_min IS NULL OR arr_delay_min >= 0),

    last_updated     TIMESTAMPTZ NOT NULL DEFAULT NOW()             -- Touched by loader ON CONFLICT UPDATE
);

-- Read-path / analytics-friendly indexes
CREATE INDEX IF NOT EXISTS idx_fact_dep_sched     ON fact_flight_status (dep_scheduled);
CREATE INDEX IF NOT EXISTS idx_fact_arr_sched     ON fact_flight_status (arr_scheduled);
CREATE INDEX IF NOT EXISTS idx_fact_airline_id    ON fact_flight_status (airline_id);
CREATE INDEX IF NOT EXISTS idx_fact_route_id      ON fact_flight_status (route_id);
CREATE INDEX IF NOT EXISTS idx_fact_flight_date   ON fact_flight_status (flight_date);
CREATE INDEX IF NOT EXISTS idx_fact_last_updated  ON fact_flight_status (last_updated);
